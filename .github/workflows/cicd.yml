name: CI/CD

on:
  workflow_dispatch:        # Manual trigger button
    inputs:
      release_notes:
        description: 'Optional notes for this run'
        required: false

env:
  BACKEND_IMAGE: your-dockerhub-namespace/splitbill-backend
  FRONTEND_IMAGE: your-dockerhub-namespace/splitbill-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.AZURE_DB_HOST }}
      DB_PORT: ${{ secrets.AZURE_DB_PORT }}
      DB_NAME: ${{ secrets.AZURE_DB_NAME }}
      DB_USER: ${{ secrets.AZURE_DB_USER }}
      DB_PASSWORD: ${{ secrets.AZURE_DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend install & tests
      - name: Install backend deps
        working-directory: backend
        run: npm ci
      - name: Run backend tests
        working-directory: backend
        run: npm test

      # Frontend install & unit tests
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci
      - name: Run frontend unit tests
        working-directory: frontend
        run: npm test

      # Frontend UI tests
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
      - name: Start preview server
        working-directory: frontend
        run: npm run preview -- --host 0.0.0.0 --port 4173 &
      - name: Run UI tests
        working-directory: frontend
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://127.0.0.1:4173
        run: npx playwright test
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: v${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build backend image
        run: docker build -t $BACKEND_IMAGE:$IMAGE_TAG -t $BACKEND_IMAGE:latest backend

      - name: Build frontend image
        run: docker build -t $FRONTEND_IMAGE:$IMAGE_TAG -t $FRONTEND_IMAGE:latest frontend

      - name: Push images
        run: |
          docker push $BACKEND_IMAGE:$IMAGE_TAG
          docker push $BACKEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:$IMAGE_TAG
          docker push $FRONTEND_IMAGE:latest

      - name: Save metadata for deploy
        id: meta
        run: |
          echo "backend=$BACKEND_IMAGE:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_IMAGE:$IMAGE_TAG" >> $GITHUB_OUTPUT
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PASSWORD }}
          script: |
            export BACKEND_IMAGE=${{ needs.build-and-push.outputs.backend }}
            export FRONTEND_IMAGE=${{ needs.build-and-push.outputs.frontend }}
            cd /opt/splitbill
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            sed -i "s#image: .*/splitbill-dev1:.*#image: $BACKEND_IMAGE#g" docker-compose.yml
            sed -i "s#image: .*/splitbill-frontend:.*#image: $FRONTEND_IMAGE#g" docker-compose.yml
            docker compose pull
            docker compose up -d --remove-orphans
            docker system prune -f
